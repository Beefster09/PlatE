=== Up next ===
    [ ] Fix the bug where controller axis bindings are mysteriously reset sometime after the bootloader loads
    [ ] Tilemap-Entity depenetration
    [ ] Event dispatching (e.g. collisions)
    [ ] Z-ordered deferred drawing
    [ ] Start on UI Engine
        [ ] Windows
        [ ] Constraints (x, y, w, h: relative and absolute from various anchors)
        [ ] Textboxes (with letter-by-letter capabilities)
        [ ] Interactive widgets
    [ ] GFX (particles)
        [ ] SOA implementation for particle system (allowing SIMD)
        [ ] GPU particles?

=== High-Level 1.0 Features ===
    [ ] Fast collision detection
        [X] Rectangle, Line, Circle Collision types
            [ ] Fully implement all collision interactions
            [ ] Optimize
        [ ] Tunnelling prevention (ccd)
        [ ] Raycasting
        [ ] Spacial indexing for level collision data
        [ ] Entity offscreen culling
        [ ] X-sorted pruning
        [X] Gravity
        [ ] Slopes
        [ ] Moving Platforms, conveyor belts?
        [ ] High-level checks
            [ ] On ground / in air
            [ ] Touching wall
    [ ] Data-oriented sprite/entity framework (Similar to a particle system)
        [ ] Parallel processing
    [ ] Particle system for effects
        [ ] Textured particles (for sparkles, smoke, etc...)
        [ ] Collision? (maybe environment only)
    [ ] Event system
    [X] JSON and binary assets
        [X] Building JSON assets into binary assets (external tool)
    [X] Resolution independence
    [ ] Looping music
    [ ] Positional sound effects
    [ ] GUI engine
        [ ] Tileable/stretchable frames
        [ ] Text boxes with options for letter-by-letter, word-by-word, etc...
        [ ] Edge/component - relative positioning (right, left, top, bottom, center, etc...)
    [ ] Automatic asset management (quasi-GC on Sprites, EntityClasses, etc...)
    [ ] Console commands
    [ ] Game timers that can be initialized, started, and stopped from scripts. (e.g. Metroid file time)
        [ ] Can be saved and loaded from game saves.
    [X] PRNG accessible from scripts
        [ ] Seeds may optionally be saved in game saves. (maybe)
    [ ] Scripting via AngelScript
        [ ] Thread-safe
            [X] Per-frame entities updates limit scope to ONLY the currently processed entity
            [ ] Event updates allow access to all entities involved
    [ ] Saving system that is easy to use and interface with
        [ ] Persistent data stores at both global scope and map scope.
        [ ] Forwards-compatible (for users) data structure (probably a hash table)
    [ ] Controller subsystem
        [X] Virtual controller / mappings
        [ ] Gamepad/Joystick support
        [X] State/Press/Release polling on buttons
        [ ] Hold time polling
        [ ] Trigger polling and events (requires per-button config on controller types)
        [X] State/Velocity polling on axes
        [X] Press/Release events
        [X] Binding conflict resolution (via silent auto-unbinding)
        [ ] Input history with sequence matching? (fightstick type stuff)
        [X] Configuration
    [ ] Basic editor (probably in a different programming language)
