Up next:
[X] JSON Sprites (basic)
[X] Entities, Velocity
[X] Gravity
[X] Rect collision
[X] Solidity
[ ] "On Ground"
[ ] Level data
[ ] Line collision
[ ] Slope following

High-Level 1.0 Features
[ ] Fast collision detection
  [ ] Rectangle, Line, Circle Collision types
  [ ] Tunnelling prevention
  [X] Gravity
  [ ] Slopes
  [ ] Moving Platforms, conveyor belts?
  [ ] High-level checks
    [ ] On ground / in air
    [ ] Touching wall
[ ] Data-oriented sprite/entity framework (Similar to a particle system)
  [ ] Parallel processing
[ ] Particle system for effects
  [ ] Textured particles (for sparkles, smoke, etc...)
  [ ] Collision? (maybe environment only)
[ ] Event system
[ ] JSON-based assets
  [ ] Baking JSON assets into binary assets
  [ ] (Maybe) compiler flags for JSON-free builds
[ ] Resolution independence
[ ] GUI framework
[ ] Automatic asset management (quasi-GC on Sprites, EntityClasses, etc...)
[ ] Scripting - probably Lua
  [ ] Thread-safe! (using one Lua interpreter per core and disallowing coroutines)
    [ ] Per-frame entities updates limit scope to ONLY the currently processed entity
    [ ] Event updates allow access to all entities involved
  [ ] Saving system that is easy to use and implement.
    [ ] Persistent data stores at both global scope and map scope.
    [ ] Forwards-compatible data structure (probably a hash table)
[ ] Basic editor (probably in a different language)